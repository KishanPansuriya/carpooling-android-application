/*!
 * elFinder - file manager for web
 * Version 2.0 rc1 (2012-04-10)
 * http://elfinder.org
 * 
 * Copyright 2009-2012, Studio 42
 * Licensed under a 3 clauses BSD license
 */ (function (a) {
    window.elFinder = function (b, c) {
        this.time("load");
        var d = this,
            b = a(b),
            e = a("<div/>").append(b.contents()),
            f = b.attr("style"),
            g = b.attr("id") || "",
            h = "elfinder-" + (g || Math.random().toString().substr(2, 7)),
            i = "mousedown." + h,
            j = "keydown." + h,
            k = "keypress." + h,
            l = !0,
            m = !0,
            n = ["enable", "disable", "load", "open", "reload", "select", "add", "remove", "change", "dblclick", "getfile", "lockfiles", "unlockfiles", "dragstart", "dragstop"],
            o = {}, p = "",
            q = {
                path: "",
                url: "",
                tmbUrl: "",
                disabled: [],
                separator: "/",
                archives: [],
                extract: [],
                copyOverwrite: !0,
                tmb: !1
            }, r = {}, s = [],
            t = {}, u = {}, v = [],
            w = [],
            x = [],
            y = new d.command(d),
            z = "auto",
            A = 400,
            B = a(document.createElement("audio")).hide().appendTo("body")[0],
            C, D = function (b) {
                if (b.init) r = {};
                else for (var c in r) r.hasOwnProperty(c) && r[c].mime != "directory" && r[c].phash == p && a.inArray(c, w) === -1 && delete r[c];
                p = b.cwd.hash, E(b.files), r[p] || E([b.cwd]), d.lastDir(p)
            }, E = function (a) {
                var b = a.length,
                    c;
                while (b--) c = a[b], c.name && c.hash && c.mime && (r[c.hash] = c)
            }, F = function (b) {
                var c = b.keyCode,
                    e = !! b.ctrlKey || !! b.metaKey;
                l && (a.each(u, function (a, f) {
                    f.type == b.type && f.keyCode == c && f.shiftKey == b.shiftKey && f.ctrlKey == e && f.altKey == b.altKey && (b.preventDefault(), b.stopPropagation(), f.callback(b, d), d.debug("shortcut-exec", a + " : " + f.description))
                }), c == 9 && b.preventDefault())
            }, G = new Date,
            H, I;
        this.api = null, this.newAPI = !1, this.oldAPI = !1, this.OS = navigator.userAgent.indexOf("Mac") !== -1 ? "mac" : navigator.userAgent.indexOf("Win") !== -1 ? "win" : "other", this.options = a.extend(!0, {}, this._options, c || {}), c.ui && (this.options.ui = c.ui), c.commands && (this.options.commands = c.commands), c.uiOptions && c.uiOptions.toolbar && (this.options.uiOptions.toolbar = c.uiOptions.toolbar), a.extend(this.options.contextmenu, c.contextmenu), this.requestType = /^(get|post)$/i.test(this.options.requestType) ? this.options.requestType.toLowerCase() : "get", this.customData = a.isPlainObject(this.options.customData) ? this.options.customData : {}, this.id = g, this.uploadURL = c.urlUpload || c.url, this.namespace = h, this.lang = this.i18[this.options.lang] && this.i18[this.options.lang].messages ? this.options.lang : "en", I = this.lang == "en" ? this.i18.en : a.extend(!0, {}, this.i18.en, this.i18[this.lang]), this.direction = I.direction, this.messages = I.messages, this.dateFormat = this.options.dateFormat || I.dateFormat, this.fancyFormat = this.options.fancyDateFormat || I.fancyDateFormat, this.today = (new Date(G.getFullYear(), G.getMonth(), G.getDate())).getTime() / 1e3, this.yesterday = this.today - 86400, H = this.options.UTCDate ? "UTC" : "", this.getHours = "get" + H + "Hours", this.getMinutes = "get" + H + "Minutes", this.getSeconds = "get" + H + "Seconds", this.getDate = "get" + H + "Date", this.getDay = "get" + H + "Day", this.getMonth = "get" + H + "Month", this.getFullYear = "get" + H + "FullYear", this.cssClass = "ui-helper-reset ui-helper-clearfix ui-widget ui-widget-content ui-corner-all elfinder elfinder-" + (this.direction == "rtl" ? "rtl" : "ltr") + " " + this.options.cssClass, this.storage = function () {
            try {
                return "localStorage" in window && window.localStorage !== null ? d.localStorage : d.cookie
            } catch (a) {
                return d.cookie
            }
        }(), this.notifyDelay = this.options.notifyDelay > 0 ? parseInt(this.options.notifyDelay) : 500, this.draggable = {
            appendTo: "body",
            addClasses: !0,
            delay: 30,
            revert: !0,
            refreshPositions: !0,
            cursor: "move",
            cursorAt: {
                left: 50,
                top: 47
            },
            drag: function (a, b) {
                b.helper.toggleClass("elfinder-drag-helper-plus", a.shiftKey || a.ctrlKey || a.metaKey)
            },
            stop: function () {
                d.trigger("focus").trigger("dragstop")
            },
            helper: function (b, c) {
                var e = this.id ? a(this) : a(this).parents("[id]:first"),
                    f = a('<div class="elfinder-drag-helper"><span class="elfinder-drag-helper-icon-plus"/></div>'),
                    g = function (a) {
                        return '<div class="elfinder-cwd-icon ' + d.mime2class(a) + ' ui-corner-all"/>'
                    }, h, i;
                return d.trigger("dragstart", {
                    target: e[0],
                    originalEvent: b
                }), h = e.is("." + d.res("class", "cwdfile")) ? d.selected() : [d.navId2Hash(e.attr("id"))], f.append(g(r[h[0]].mime)).data("files", h), (i = h.length) > 1 && f.append(g(r[h[i - 1]].mime) + '<span class="elfinder-drag-num">' + i + "</span>"), f
            }
        }, this.droppable = {
            tolerance: "pointer",
            accept: ".elfinder-cwd-file-wrapper,.elfinder-navbar-dir,.elfinder-cwd-file",
            hoverClass: this.res("class", "adroppable"),
            drop: function (b, c) {
                var e = a(this),
                    f = a.map(c.helper.data("files") || [], function (a) {
                        return a || null
                    }),
                    g = [],
                    h = "class",
                    i, j, k, l;
                e.is("." + d.res(h, "cwd")) ? j = p : e.is("." + d.res(h, "cwdfile")) ? j = e.attr("id") : e.is("." + d.res(h, "navdir")) && (j = d.navId2Hash(e.attr("id"))), i = f.length;
                while (i--) l = f[i], l != j && r[l].phash != j && g.push(l);
                g.length && (c.helper.hide(), d.clipboard(g, !(b.ctrlKey || b.shiftKey || b.metaKey)), d.exec("paste", j).always(function () {
                    d.clipboard([])
                }), d.trigger("drop", {
                    files: f
                }))
            }
        }, this.enabled = function () {
            return b.is(":visible") && l
        }, this.visible = function () {
            return b.is(":visible")
        }, this.root = function (a) {
            var b = r[a || p],
                c;
            while (b && b.phash) b = r[b.phash];
            if (b) return b.hash;
            while (c in r && r.hasOwnProperty(c)) {
                b = r[c];
                if (!b.phash && !b.mime == "directory" && b.read) return b.hash
            }
            return ""
        }, this.cwd = function () {
            return r[p] || {}
        }, this.option = function (a) {
            return q[a] || ""
        }, this.file = function (a) {
            return r[a]
        }, this.files = function () {
            return a.extend(!0, {}, r)
        }, this.parents = function (a) {
            var b = [],
                c;
            while (c = this.file(a)) b.unshift(c.hash), a = c.phash;
            return b
        }, this.path2array = function (a) {
            var b, c = [];
            while (a && (b = r[a]) && b.hash) c.unshift(b.name), a = b.phash;
            return c
        }, this.path = function (a) {
            return r[a] && r[a].path ? r[a].path : this.path2array(a).join(q.separator)
        }, this.url = function (b) {
            var c = r[b];
            if (!c || !c.read) return "";
            if (c.url) return c.url;
            if (q.url) return q.url + a.map(this.path2array(b), function (a) {
                return encodeURIComponent(a)
            }).slice(1).join("/");
            var d = a.extend({}, this.customData, {
                cmd: "file",
                target: c.hash
            });
            return this.oldAPI && (d.cmd = "open", d.current = c.phash), this.options.url + (this.options.url.indexOf("?") === -1 ? "?" : "&") + a.param(d, !0)
        }, this.tmb = function (b) {
            var c = r[b],
                d = c && c.tmb && c.tmb != 1 ? q.tmbUrl + c.tmb : "";
            return d && (a.browser.opera || a.browser.msie) && (d += "?_=" + (new Date).getTime()), d
        }, this.selected = function () {
            return s.slice(0)
        }, this.selectedFiles = function () {
            return a.map(s, function (a) {
                return r[a] || null
            })
        }, this.fileByName = function (a, b) {
            var c;
            for (c in r) if (r.hasOwnProperty(c) && r[c].phash == b && r[c].name == a) return r[c]
        }, this.validResponse = function (a, b) {
            return b.error || this.rules[this.rules[a] ? a : "defaults"](b)
        }, this.request = function (b) {
            var c = this,
                d = this.options,
                e = a.Deferred(),
                f = a.extend({}, d.customData, {
                    mimes: d.onlyMimes
                }, b.data || b),
                g = f.cmd,
                h = !b.preventDefault && !b.preventFail,
                i = !b.preventDefault && !b.preventDone,
                j = a.extend({}, b.notify),
                k = !! b.raw,
                l = b.syncOnFail,
                m, b = a.extend({
                    url: d.url,
                    async: !0,
                    type: this.requestType,
                    dataType: "json",
                    cache: !1,
                    data: f
                }, b.options || {}),
                n = function (b) {
                    b.warning && c.error(b.warning), g == "open" && D(a.extend(!0, {}, b)), b.removed && b.removed.length && c.remove(b), b.added && b.added.length && c.add(b), b.changed && b.changed.length && c.change(b), c.trigger(g, b), b.sync && c.sync()
                }, o = function (a, b) {
                    var c;
                    switch (b) {
                        case "abort":
                            c = a.quiet ? "" : ["errConnect", "errAbort"];
                            break;
                        case "timeout":
                            c = ["errConnect", "errTimeout"];
                            break;
                        case "parsererror":
                            c = ["errResponse", "errDataNotJSON"];
                            break;
                        default:
                            a.status == 403 ? c = ["errConnect", "errAccess"] : a.status == 404 ? c = ["errConnect", "errNotFound"] : c = "errConnect"
                    }
                    e.reject(c, a, b)
                }, p = function (b) {
                    if (k) return e.resolve(b);
                    if (!b) return e.reject(["errResponse", "errDataEmpty"], r);
                    if (!a.isPlainObject(b)) return e.reject(["errResponse", "errDataNotJSON"], r);
                    if (b.error) return e.reject(b.error, r);
                    if (!c.validResponse(g, b)) return e.reject("errResponse", r);
                    b = c.normalize(b), c.api || (c.api = b.api || 1, c.newAPI = c.api >= 2, c.oldAPI = !c.newAPI), b.options && (q = a.extend({}, q, b.options)), e.resolve(b), b.debug && c.debug("backend-debug", b.debug)
                }, r, s;
            i && e.done(n), e.fail(function (a) {
                a && (h ? c.error(a) : c.debug("error", c.i18n(a)))
            });
            if (!g) return e.reject("errCmdReq");
            l && e.fail(function (a) {
                a && c.sync()
            }), j.type && j.cnt && (m = setTimeout(function () {
                c.notify(j), e.always(function () {
                    j.cnt = -(parseInt(j.cnt) || 0), c.notify(j)
                })
            }, c.notifyDelay), e.always(function () {
                clearTimeout(m)
            }));
            if (g == "open") while (s = x.pop())!s.isRejected() && !s.isResolved() && (s.quiet = !0, s.abort());
            return delete b.preventFail, r = this.transport.send(b).fail(o).done(p), g == "open" && (x.unshift(r), e.always(function () {
                var b = a.inArray(r, x);
                b !== -1 && x.splice(b, 1)
            })), e
        }, this.diff = function (b) {
            var c = {}, d = [],
                e = [],
                f = [],
                g = function (a) {
                    var b = f.length;
                    while (b--) if (f[b].hash == a) return !0
                };
            return a.each(b, function (a, b) {
                c[b.hash] = b
            }), a.each(r, function (a, b) {
                !c[a] && e.push(a)
            }), a.each(c, function (b, c) {
                var e = r[b];
                e ? a.each(c, function (a) {
                    if (c[a] != e[a]) return f.push(c), !1
                }) : d.push(c)
            }), a.each(e, function (b, d) {
                var h = r[d],
                    i = h.phash;
                i && h.mime == "directory" && a.inArray(i, e) === -1 && c[i] && !g(i) && f.push(c[i])
            }), {
                added: d,
                removed: e,
                changed: f
            }
        }, this.sync = function () {
            var b = this,
                c = a.Deferred().done(function () {
                    b.trigger("sync")
                }),
                d = {
                    data: {
                        cmd: "open",
                        init: 1,
                        target: p,
                        tree: this.ui.tree ? 1 : 0
                    },
                    preventDefault: !0
                }, e = {
                    data: {
                        cmd: "parents",
                        target: p
                    },
                    preventDefault: !0
                };
            return a.when(this.request(d), this.request(e)).fail(function (a) {
                c.reject(a), a && b.request({
                    data: {
                        cmd: "open",
                        target: b.lastDir(""),
                        tree: 1,
                        init: 1
                    },
                    notify: {
                        type: "open",
                        cnt: 1,
                        hideCnt: !0
                    }
                })
            }).done(function (a, d) {
                var e = b.diff(a.files.concat(d && d.tree ? d.tree : []));
                return e.removed.length && b.remove(e), e.added.length && b.add(e), e.changed.length && b.change(e), c.resolve(e)
            }), c
        }, this.upload = function (a) {
            return this.transport.upload(a, this)
        }, this.bind = function (a, b) {
            var c;
            if (typeof b == "function") {
                a = ("" + a).toLowerCase().split(/\s+/);
                for (c = 0; c < a.length; c++) t[a[c]] === void 0 && (t[a[c]] = []), t[a[c]].push(b)
            }
            return this
        }, this.unbind = function (a, b) {
            var c = t[("" + a).toLowerCase()] || [],
                d = c.indexOf(b);
            return d > -1 && c.splice(d, 1), b = null, this
        }, this.trigger = function (b, c) {
            var b = b.toLowerCase(),
                d = t[b] || [],
                e, f;
            this.debug("event-" + b, c);
            if (d.length) {
                b = a.Event(b);
                for (e = 0; e < d.length; e++) {
                    b.data = a.extend(!0, {}, c);
                    try {
                        if (d[e](b, this) === !1 || b.isDefaultPrevented()) {
                            this.debug("event-stoped", b.type);
                            break
                        }
                    } catch (g) {
                        window.console && window.console.log && window.console.log(g)
                    }
                }
            }
            return this
        }, this.shortcut = function (b) {
            var c, d, e, f, g;
            if (this.options.allowShortcuts && b.pattern && a.isFunction(b.callback)) {
                c = b.pattern.toUpperCase().split(/\s+/);
                for (f = 0; f < c.length; f++) d = c[f], g = d.split("+"), e = (e = g.pop()).length == 1 ? e > 0 ? e : e.charCodeAt(0) : a.ui.keyCode[e], e && !u[d] && (u[d] = {
                    keyCode: e,
                    altKey: a.inArray("ALT", g) != -1,
                    ctrlKey: a.inArray("CTRL", g) != -1,
                    shiftKey: a.inArray("SHIFT", g) != -1,
                    type: b.type || "keydown",
                    callback: b.callback,
                    description: b.description,
                    pattern: d
                })
            }
            return this
        }, this.shortcuts = function () {
            var b = [];
            return a.each(u, function (a, c) {
                b.push([c.pattern, d.i18n(c.description)])
            }), b
        }, this.clipboard = function (b, c) {
            var d = function () {
                return a.map(v, function (a) {
                    return a.hash
                })
            };
            return b !== void 0 && (v.length && this.trigger("unlockfiles", {
                files: d()
            }), w = [], v = a.map(b || [], function (a) {
                var b = r[a];
                return b ? (w.push(a), {
                    hash: a,
                    phash: b.phash,
                    name: b.name,
                    mime: b.mime,
                    read: b.read,
                    locked: b.locked,
                    cut: !! c
                }) : null
            }), this.trigger("changeclipboard", {
                clipboard: v.slice(0, v.length)
            }), c && this.trigger("lockfiles", {
                files: d()
            })), v.slice(0, v.length)
        }, this.isCommandEnabled = function (b) {
            return this._commands[b] ? a.inArray(b, q.disabled) === -1 : !1
        }, this.exec = function (b, c, d) {
            return this._commands[b] && this.isCommandEnabled(b) ? this._commands[b].exec(c, d) : a.Deferred().reject("No such command")
        }, this.dialog = function (c, d) {
            return a("<div/>").append(c).appendTo(b).elfinderdialog(d)
        }, this.getUI = function (a) {
            return this.ui[a] || b
        }, this.command = function (a) {
            return a === void 0 ? this._commands : this._commands[a]
        }, this.resize = function (a, c) {
            b.css("width", a).height(c).trigger("resize"), this.trigger("resize", {
                width: b.width(),
                height: b.height()
            })
        }, this.restoreSize = function () {
            this.resize(z, A)
        }, this.show = function () {
            b.show(), this.enable().trigger("show")
        }, this.hide = function () {
            this.disable().trigger("hide"), b.hide()
        }, this.destroy = function () {
            b && b[0].elfinder && (this.trigger("destroy").disable(), t = {}, u = {}, a(document).add(b).unbind("." + this.namespace), d.trigger = function () {}, b.children().remove(), b.append(e.contents()).removeClass(this.cssClass).attr("style", f), b[0].elfinder = null, C && clearInterval(C))
        }, this.setSort(this.options.sort, this.options.sortDirect);
        if (!(a.fn.selectable && a.fn.draggable && a.fn.droppable)) return alert(this.i18n("errJqui"));
        if (!b.length) return alert(this.i18n("errNode"));
        if (!this.options.url) return alert(this.i18n("errURL"));
        a.extend(a.ui.keyCode, {
            F1: 112,
            F2: 113,
            F3: 114,
            F4: 115,
            F5: 116,
            F6: 117,
            F7: 118,
            F8: 119,
            F9: 120
        }), this.dragUpload = !1, this.xhrUpload = typeof XMLHttpRequestUpload != "undefined" && typeof File != "undefined" && typeof FormData != "undefined", this.transport = {}, typeof this.options.transport == "object" && (this.transport = this.options.transport, typeof this.transport.init == "function" && this.transport.init(this)), typeof this.transport.send != "function" && (this.transport.send = function (b) {
            return a.ajax(b)
        }), this.transport.upload == "iframe" ? this.transport.upload = a.proxy(this.uploads.iframe, this) : typeof this.transport.upload == "function" ? this.dragUpload = !! this.options.dragUploadAllow : this.xhrUpload ? (this.transport.upload = a.proxy(this.uploads.xhr, this), this.dragUpload = !0) : this.transport.upload = a.proxy(this.uploads.iframe, this), this.error = function () {
            var a = arguments[0];
            return arguments.length == 1 && typeof a == "function" ? d.bind("error", a) : d.trigger("error", {
                error: a
            })
        }, a.each(["enable", "disable", "load", "open", "reload", "select", "add", "remove", "change", "dblclick", "getfile", "lockfiles", "unlockfiles", "dragstart", "dragstop", "search", "searchend", "viewchange"], function (b, c) {
            d[c] = function () {
                var b = arguments[0];
                return arguments.length == 1 && typeof b == "function" ? d.bind(c, b) : d.trigger(c, a.isPlainObject(b) ? b : {})
            }
        }), this.enable(function () {
            !l && d.visible() && d.ui.overlay.is(":hidden") && (l = !0, a("texarea:focus,input:focus,button").blur(), b.removeClass("elfinder-disabled"))
        }).disable(function () {
            m = l, l = !1, b.addClass("elfinder-disabled")
        }).open(function () {
            s = []
        }).select(function (b) {
            s = a.map(b.data.selected || b.data.value || [], function (a) {
                return r[a] ? a : null
            })
        }).error(function (b) {
            var c = {
                cssClass: "elfinder-dialog-error",
                title: d.i18n(d.i18n("error")),
                resizable: !1,
                destroyOnClose: !0,
                buttons: {}
            };
            c.buttons[d.i18n(d.i18n("btnClose"))] = function () {
                a(this).elfinderdialog("close")
            }, d.dialog('<span class="elfinder-dialog-icon elfinder-dialog-icon-error"/>' + d.i18n(b.data.error), c)
        }).bind("tree parents", function (a) {
            E(a.data.tree || [])
        }).bind("tmb", function (b) {
            a.each(b.data.images || [], function (a, b) {
                r[a] && (r[a].tmb = b)
            })
        }).add(function (a) {
            E(a.data.added || [])
        }).change(function (b) {
            a.each(b.data.changed || [], function (b, c) {
                var d = c.hash;
                r[d] = r[d] ? a.extend(r[d], c) : c
            })
        }).remove(function (b) {
            var c = b.data.removed || [],
                d = c.length,
                e = function (b) {
                    var c = r[b];
                    c && (c.mime == "directory" && c.dirs && a.each(r, function (a, c) {
                        c.phash == b && e(a)
                    }), delete r[b])
                };
            while (d--) e(c[d])
        }).bind("search", function (a) {
            E(a.data.files)
        }).bind("rm", function (b) {
            var c = B.canPlayType && B.canPlayType('audio/wav; codecs="1"');
            c && c != "" && c != "no" && a(B).html('<source src="./sounds/rm.wav" type="audio/wav">')[0].play()
        }), a.each(this.options.handlers, function (a, b) {
            d.bind(a, b)
        }), this.history = new this.history(this), typeof this.options.getFileCallback == "function" && this.commands.getfile && (this.bind("dblclick", function (a) {
            a.preventDefault(), d.exec("getfile").fail(function () {
                d.exec("open")
            })
        }), this.shortcut({
            pattern: "enter",
            description: this.i18n("cmdgetfile"),
            callback: function () {
                d.exec("getfile").fail(function () {
                    d.exec(d.OS == "mac" ? "rename" : "open")
                })
            }
        }).shortcut({
            pattern: "ctrl+enter",
            description: this.i18n(this.OS == "mac" ? "cmdrename" : "cmdopen"),
            callback: function () {
                d.exec(d.OS == "mac" ? "rename" : "open")
            }
        })), this._commands = {}, a.isArray(this.options.commands) || (this.options.commands = []), a.each(["open", "reload", "back", "forward", "up", "home", "info", "quicklook", "getfile", "help"], function (b, c) {
            a.inArray(c, d.options.commands) === -1 && d.options.commands.push(c)
        }), a.each(this.options.commands, function (b, c) {
            var e = d.commands[c];
            a.isFunction(e) && !d._commands[c] && (e.prototype = y, d._commands[c] = new e, d._commands[c].setup(c, d.options.commandsOptions[c] || {}))
        }), b.addClass(this.cssClass).bind(i, function () {
            !l && d.enable()
        }), this.ui = {
            workzone: a("<div/>").appendTo(b).elfinderworkzone(this),
            navbar: a("<div/>").appendTo(b).elfindernavbar(this, this.options.uiOptions.navbar || {}),
            contextmenu: a("<div/>").appendTo(b).elfindercontextmenu(this),
            overlay: a("<div/>").appendTo(b).elfinderoverlay({
                show: function () {
                    d.disable()
                },
                hide: function () {
                    m && d.enable()
                }
            }),
            cwd: a("<div/>").appendTo(b).elfindercwd(this),
            notify: this.dialog("", {
                cssClass: "elfinder-dialog-notify",
                position: {
                    top: "12px",
                    right: "12px"
                },
                resizable: !1,
                autoOpen: !1,
                title: "&nbsp;",
                width: 280
            }),
            statusbar: a('<div class="ui-widget-header ui-helper-clearfix ui-corner-bottom elfinder-statusbar"/>').hide().appendTo(b)
        }, a.each(this.options.ui || [], function (c, e) {
            var f = "elfinder" + e,
                g = d.options.uiOptions[e] || {};
            !d.ui[e] && a.fn[f] && (d.ui[e] = a("<" + (g.tag || "div") + "/>").appendTo(b)[f](d, g))
        }), b[0].elfinder = this, this.options.resizable && a.fn.resizable && b.resizable({
            handles: "se",
            minWidth: 300,
            minHeight: 200
        }), this.options.width && (z = this.options.width), this.options.height && (A = parseInt(this.options.height)), d.resize(z, A), a(document).bind("click." + this.namespace, function (c) {
            l && !a(c.target).closest(b).length && d.disable()
        }).bind(j + " " + k, F), this.trigger("init").request({
            data: {
                cmd: "open",
                target: d.lastDir(),
                init: 1,
                tree: this.ui.tree ? 1 : 0
            },
            preventDone: !0,
            notify: {
                type: "open",
                cnt: 1,
                hideCnt: !0
            },
            freeze: !0
        }).fail(function () {
            d.trigger("fail").disable().lastDir(""), t = {}, u = {}, a(document).add(b).unbind("." + this.namespace), d.trigger = function () {}
        }).done(function (b) {
            d.load().debug("api", d.api), b = a.extend(!0, {}, b), D(b), d.trigger("open", b)
        }), this.one("load", function () {
            b.trigger("resize"), d.options.sync > 1e3 && (C = setInterval(function () {
                d.sync()
            }, d.options.sync))
        })
    }, elFinder.prototype = {
        res: function (a, b) {
            return this.resources[a] && this.resources[a][b]
        },
        i18: {
            en: {
                translator: "",
                language: "English",
                direction: "ltr",
                dateFormat: "d.m.Y H:i",
                fancyDateFormat: "$1 H:i",
                messages: {}
            },
            months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
            monthsShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
            days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
            daysShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]
        },
        kinds: {
            unknown: "Unknown",
            directory: "Folder",
            symlink: "Alias",
            "symlink-broken": "AliasBroken",
            "application/x-empty": "TextPlain",
            "application/postscript": "Postscript",
            "application/vnd.ms-office": "MsOffice",
            "application/vnd.ms-word": "MsWord",
            "application/vnd.ms-excel": "MsExcel",
            "application/vnd.ms-powerpoint": "MsPP",
            "application/pdf": "PDF",
            "application/xml": "XML",
            "application/vnd.oasis.opendocument.text": "OO",
            "application/x-shockwave-flash": "AppFlash",
            "application/flash-video": "Flash video",
            "application/x-bittorrent": "Torrent",
            "application/javascript": "JS",
            "application/rtf": "RTF",
            "application/rtfd": "RTF",
            "application/x-font-ttf": "TTF",
            "application/x-font-otf": "OTF",
            "application/x-rpm": "RPM",
            "application/x-web-config": "TextPlain",
            "application/xhtml+xml": "HTML",
            "application/docbook+xml": "DOCBOOK",
            "application/x-awk": "AWK",
            "application/x-gzip": "GZIP",
            "application/x-bzip2": "BZIP",
            "application/zip": "ZIP",
            "application/x-zip": "ZIP",
            "application/x-rar": "RAR",
            "application/x-tar": "TAR",
            "application/x-7z-compressed": "7z",
            "application/x-jar": "JAR",
            "text/plain": "TXT",
            "text/x-php": "PHP",
            "text/html": "HTML",
            "text/javascript": "JS",
            "text/css": "CSS",
            "text/rtf": "RTF",
            "text/rtfd": "RTF",
            "text/x-c": "C",
            "text/x-csrc": "C",
            "text/x-chdr": "CHeader",
            "text/x-c++": "CPP",
            "text/x-c++src": "CPP",
            "text/x-c++hdr": "CPPHeader",
            "text/x-shellscript": "Shell",
            "application/x-csh": "Shell",
            "text/x-python": "Python",
            "text/x-java": "Java",
            "text/x-java-source": "Java",
            "text/x-ruby": "Ruby",
            "text/x-perl": "Perl",
            "text/x-sql": "SQL",
            "text/xml": "XML",
            "text/x-comma-separated-values": "CSV",
            "image/x-ms-bmp": "BMP",
            "image/jpeg": "JPEG",
            "image/gif": "GIF",
            "image/png": "PNG",
            "image/tiff": "TIFF",
            "image/x-targa": "TGA",
            "image/vnd.adobe.photoshop": "PSD",
            "image/xbm": "XBITMAP",
            "image/pxm": "PXM",
            "audio/mpeg": "AudioMPEG",
            "audio/midi": "AudioMIDI",
            "audio/ogg": "AudioOGG",
            "audio/mp4": "AudioMPEG4",
            "audio/x-m4a": "AudioMPEG4",
            "audio/wav": "AudioWAV",
            "audio/x-mp3-playlist": "AudioPlaylist",
            "video/x-dv": "VideoDV",
            "video/mp4": "VideoMPEG4",
            "video/mpeg": "VideoMPEG",
            "video/x-msvideo": "VideoAVI",
            "video/quicktime": "VideoMOV",
            "video/x-ms-wmv": "VideoWM",
            "video/x-flv": "VideoFlash",
            "video/x-matroska": "VideoMKV",
            "video/ogg": "VideoOGG"
        },
        rules: {
            defaults: function (b) {
                return !b || b.added && !a.isArray(b.added) || b.removed && !a.isArray(b.removed) || b.changed && !a.isArray(b.changed) ? !1 : !0
            },
            open: function (b) {
                return b && b.cwd && b.files && a.isPlainObject(b.cwd) && a.isArray(b.files)
            },
            tree: function (b) {
                return b && b.tree && a.isArray(b.tree)
            },
            parents: function (b) {
                return b && b.tree && a.isArray(b.tree)
            },
            tmb: function (b) {
                return b && b.images && (a.isPlainObject(b.images) || a.isArray(b.images))
            },
            upload: function (b) {
                return b && (a.isPlainObject(b.added) || a.isArray(b.added))
            },
            search: function (b) {
                return b && b.files && a.isArray(b.files)
            }
        },
        sorts: {
            nameDirsFirst: 1,
            kindDirsFirst: 2,
            sizeDirsFirst: 3,
            dateDirsFirst: 4,
            name: 5,
            kind: 6,
            size: 7,
            date: 8
        },
        setSort: function (a, b) {
            this.sort = this.sorts[a] || 1, this.sortDirect = b == "asc" || b == "desc" ? b : "asc", this.trigger("sortchange")
        },
        commands: {},
        parseUploadData: function (b) {
            var c;
            if (!a.trim(b)) return {
                error: ["errResponse", "errDataEmpty"]
            };
            try {
                c = a.parseJSON(b)
            } catch (d) {
                return {
                    error: ["errResponse", "errDataNotJSON"]
                }
            }
            return this.validResponse("upload", c) ? (c = this.normalize(c), c.removed = a.map(c.added || [], function (a) {
                return a.hash
            }), c) : {
                error: ["errResponse"]
            }
        },
        iframeCnt: 0,
        uploads: {
            iframe: function (b, c) {
                var d = c ? c : this,
                    e = b.input,
                    f = a.Deferred().fail(function (a) {
                        a && d.error(a)
                    }).done(function (a) {
                        a.warning && d.error(a.warning), a.removed && d.remove(a), a.added && d.add(a), a.changed && d.change(a), d.trigger("upload", a), a.sync && d.sync()
                    }),
                    g = "iframe-" + d.namespace + ++d.iframeCnt,
                    h = a('<form action="' + d.uploadURL + '" method="post" enctype="multipart/form-data" encoding="multipart/form-data" target="' + g + '" style="display:none"><input type="hidden" name="cmd" value="upload" /></form>'),
                    i = a.browser.msie,
                    j = function () {
                        o && clearTimeout(o), n && clearTimeout(n), m && d.notify({
                            type: "upload",
                            cnt: -l
                        }), setTimeout(function () {
                            i && a('<iframe src="javascript:false;"/>').appendTo(h), h.remove(), k.remove()
                        }, 100)
                    }, k = a('<iframe src="' + (i ? "javascript:false;" : "about:blank") + '" name="' + g + '" style="position:absolute;left:-1000px;top:-1000px" />').bind("load", function () {
                        k.unbind("load").bind("load", function () {
                            var a = d.parseUploadData(k.contents().text());
                            j(), a.error ? f.reject(a.error) : f.resolve(a)
                        }), n = setTimeout(function () {
                            m = !0, d.notify({
                                type: "upload",
                                cnt: l
                            })
                        }, d.options.notifyDelay), d.options.iframeTimeout > 0 && (o = setTimeout(function () {
                            j(), f.reject([errors.connect, errors.timeout])
                        }, d.options.iframeTimeout)), h.submit()
                    }),
                    l, m, n, o;
                return e && a(e).is(":file") && a(e).val() ? (h.append(e), l = e.files ? e.files.length : 1, h.append('<input type="hidden" name="' + (d.newAPI ? "target" : "current") + '" value="' + d.cwd().hash + '"/>').append('<input type="hidden" name="html" value="1"/>').append(a(e).attr("name", "upload[]")), a.each(d.options.onlyMimes || [], function (a, b) {
                    h.append('<input type="hidden" name="mimes[]" value="' + b + '"/>')
                }), a.each(d.options.customData, function (a, b) {
                    h.append('<input type="hidden" name="' + a + '" value="' + b + '"/>')
                }), h.appendTo("body"), k.appendTo("body"), f) : f.reject()
            },
            xhr: function (b, c) {
                var d = c ? c : this,
                    e = a.Deferred().fail(function (a) {
                        a && d.error(a)
                    }).done(function (a) {
                        a.warning && d.error(a.warning), a.removed && d.remove(a), a.added && d.add(a), a.changed && d.change(a), d.trigger("upload", a), a.sync && d.sync()
                    }).always(function () {
                        m && clearTimeout(m), k && d.notify({
                            type: "upload",
                            cnt: -i,
                            progress: 100 * i
                        })
                    }),
                    f = new XMLHttpRequest,
                    g = new FormData,
                    h = b.input ? b.input.files : b.files,
                    i = h.length,
                    j = 5,
                    k = !1,
                    l = function () {
                        return setTimeout(function () {
                            k = !0, d.notify({
                                type: "upload",
                                cnt: i,
                                progress: j * i
                            })
                        }, d.options.notifyDelay)
                    }, m;
                if (!i) return e.reject();
                f.addEventListener("error", function () {
                    e.reject("errConnect")
                }, !1), f.addEventListener("abort", function () {
                    e.reject(["errConnect", "errAbort"])
                }, !1), f.addEventListener("load", function () {
                    var a = f.status,
                        b;
                    if (a > 500) return e.reject("errResponse");
                    if (a != 200) return e.reject("errConnect");
                    if (f.readyState != 4) return e.reject(["errConnect", "errTimeout"]);
                    if (!f.responseText) return e.reject(["errResponse", "errDataEmpty"]);
                    b = d.parseUploadData(f.responseText), b.error ? e.reject(b.error) : e.resolve(b)
                }, !1), f.upload.addEventListener("progress", function (a) {
                    var b = j,
                        c;
                    a.lengthComputable && (c = parseInt(a.loaded * 100 / a.total), c > 0 && !m && (m = l()), c - b > 4 && (j = c, k && d.notify({
                        type: "upload",
                        cnt: 0,
                        progress: (j - b) * i
                    })))
                }, !1), f.open("POST", d.uploadURL, !0), g.append("cmd", "upload"), g.append(d.newAPI ? "target" : "current", d.cwd().hash), a.each(d.options.customData, function (a, b) {
                    g.append(a, b)
                }), a.each(d.options.onlyMimes, function (a, b) {
                    g.append("mimes[" + a + "]", b)
                }), a.each(h, function (a, b) {
                    g.append("upload[]", b)
                }), f.onreadystatechange = function () {
                    f.readyState == 4 && f.status == 0 && e.reject(["errConnect", "errAbort"])
                }, f.send(g);
                if (!a.browser.safari || !b.files) m = l();
                return e
            }
        },
        one: function (b, c) {
            var d = this,
                e = a.proxy(c, function (a) {
                    return setTimeout(function () {
                        d.unbind(a.type, e)
                    }, 3), c.apply(this, arguments)
                });
            return this.bind(b, e)
        },
        localStorage: function (a, b) {
            var c = window.localStorage;
            return a = "elfinder-" + a + this.id, b !== void 0 && c.setItem(a, b), c.getItem(a) || ""
        },
        cookie: function (b, c) {
            var d, e, f, g;
            b = "elfinder-" + b + this.id;
            if (c === void 0) {
                if (document.cookie && document.cookie != "") {
                    f = document.cookie.split(";"), b += "=";
                    for (g = 0; g < f.length; g++) {
                        f[g] = a.trim(f[g]);
                        if (f[g].substring(0, b.length) == b) return decodeURIComponent(f[g].substring(b.length))
                    }
                }
                return ""
            }
            return e = a.extend({}, this.options.cookie), c === null && (c = "", e.expires = -1), typeof e.expires == "number" && (d = new Date, d.setTime(d.getTime() + e.expires * 864e5), e.expires = d), document.cookie = b + "=" + encodeURIComponent(c) + "; expires=" + e.expires.toUTCString() + (e.path ? "; path=" + e.path : "") + (e.domain ? "; domain=" + e.domain : "") + (e.secure ? "; secure" : ""), c
        },
        lastDir: function (a) {
            return this.options.rememberLastDir ? this.storage("lastdir", a) : ""
        },
        _node: a("<span/>"),
        escape: function (a) {
            return this._node.text(a).html()
        },
        normalize: function (b) {
            var c = function (a) {
                return a && a.hash && a.name && a.mime ? (a.mime == "application/x-empty" && (a.mime = "text/plain"), a) : null
            };
            return b.files && (b.files = a.map(b.files, c)), b.tree && (b.tree = a.map(b.tree, c)), b.added && (b.added = a.map(b.added, c)), b.changed && (b.changed = a.map(b.changed, c)), b.api && (b.init = !0), b
        },
        compare: function (a, b) {
            var c = this.sort,
                d = this.sortDirect == "asc",
                e = d ? a : b,
                f = d ? b : a,
                g = this.mime2kind(e.mime).toLowerCase(),
                h = this.mime2kind(f.mime).toLowerCase(),
                i = a.mime == "directory",
                j = b.mime == "directory",
                k = e.name.toLowerCase(),
                l = f.name.toLowerCase(),
                m = i ? 0 : parseInt(e.size) || 0,
                n = j ? 0 : parseInt(f.size) || 0,
                o = e.ts || e.date || "",
                p = f.ts || f.date || "";
            if (c <= 4) {
                if (i && !j) return -1;
                if (!i && j) return 1
            }
            return c != 2 && c != 6 || g == h ? c != 3 && c != 7 || m == n ? c != 4 && c != 8 || o == p ? e.name.localeCompare(f.name) : o > p ? 1 : -1 : m > n ? 1 : -1 : g.localeCompare(h)
        },
        sortFiles: function (b) {
            return b.sort(a.proxy(this.compare, this))
        },
        notify: function (b) {
            var c = b.type,
                d = this.messages["ntf" + c] ? this.i18n("ntf" + c) : this.i18n("ntfsmth"),
                e = this.ui.notify,
                f = e.children(".elfinder-notify-" + c),
                g = '<div class="elfinder-notify elfinder-notify-{type}"><span class="elfinder-dialog-icon elfinder-dialog-icon-{type}"/><span class="elfinder-notify-msg">{msg}</span> <span class="elfinder-notify-cnt"/><div class="elfinder-notify-progressbar"><div class="elfinder-notify-progress"/></div></div>',
                h = b.cnt,
                i = b.progress >= 0 && b.progress <= 100 ? b.progress : 0,
                j, k, l;
            return c ? (f.length || (f = a(g.replace(/\{type\}/g, c).replace(/\{msg\}/g, d)).appendTo(e).data("cnt", 0), i && f.data({
                progress: 0,
                total: 0
            })), j = h + parseInt(f.data("cnt")), j > 0 ? (!b.hideCnt && f.children(".elfinder-notify-cnt").text("(" + j + ")"), e.is(":hidden") && e.elfinderdialog("open"), f.data("cnt", j), i < 100 && (k = f.data("total")) >= 0 && (l = f.data("progress")) >= 0 && (k = h + parseInt(f.data("total")), l = i + l, i = parseInt(l / k), f.data({
                progress: l,
                total: k
            }), e.find(".elfinder-notify-progress").animate({
                width: (i < 100 ? i : 100) + "%"
            }, 20))) : (f.remove(), !e.children().length && e.elfinderdialog("close")), this) : this
        },
        confirm: function (b) {
            var c = !1,
                d = {
                    cssClass: "elfinder-dialog-confirm",
                    modal: !0,
                    resizable: !1,
                    title: this.i18n(b.title || "confirmReq"),
                    buttons: {},
                    close: function () {
                        !c && b.cancel.callback(), a(this).elfinderdialog("destroy")
                    }
                }, e = this.i18n("apllyAll"),
                f, g;
            return b.reject && (d.buttons[this.i18n(b.reject.label)] = function () {
                b.reject.callback( !! g && !! g.prop("checked")), c = !0, a(this).elfinderdialog("close")
            }), d.buttons[this.i18n(b.accept.label)] = function () {
                b.accept.callback( !! g && !! g.prop("checked")), c = !0, a(this).elfinderdialog("close")
            }, d.buttons[this.i18n(b.cancel.label)] = function () {
                a(this).elfinderdialog("close")
            }, b.all && (b.reject && (d.width = 370), d.create = function () {
                g = a('<input type="checkbox" />'), a(this).next().children().before(a("<label>" + e + "</label>").prepend(g))
            }, d.open = function () {
                var b = a(this).next(),
                    c = parseInt(b.children(":first").outerWidth() + b.children(":last").outerWidth());
                c > parseInt(b.width()) && a(this).closest(".elfinder-dialog").width(c + 30)
            }), this.dialog('<span class="elfinder-dialog-icon elfinder-dialog-icon-confirm"/>' + this.i18n(b.text), d)
        },
        uniqueName: function (a, b) {
            var c = 0,
                d = "",
                e, f;
            a = this.i18n(a), b = b || this.cwd().hash, (e = a.indexOf(".txt")) != -1 && (d = ".txt", a = a.substr(0, e)), f = a + d;
            if (!this.fileByName(f, b)) return f;
            while (c < 1e4) {
                f = a + " " + ++c + d;
                if (!this.fileByName(f, b)) return f
            }
            return a + Math.random() + d
        },
        i18n: function () {
            var b = this,
                c = this.messages,
                d = [],
                e = [],
                f = function (a) {
                    var c;
                    if (a.indexOf("#") === 0) if (c = b.file(a.substr(1))) return c.name;
                    return a
                }, g, h, i;
            for (g = 0; g < arguments.length; g++) {
                i = arguments[g];
                if (typeof i == "string") d.push(f(i));
                else if (a.isArray(i)) for (h = 0; h < i.length; h++) typeof i[h] == "string" && d.push(f(i[h]))
            }
            for (g = 0; g < d.length; g++) {
                if (a.inArray(g, e) !== -1) continue;
                i = d[g], i = c[i] || i, i = i.replace(/\$(\d+)/g, function (a, b) {
                    return b = g + parseInt(b), b > 0 && d[b] && e.push(b), d[b] || ""
                }), d[g] = i
            }
            return a.map(d, function (b, c) {
                return a.inArray(c, e) === -1 ? b : null
            }).join("<br>")
        },
        mime2class: function (a) {
            var b = "elfinder-cwd-icon-";
            return a = a.split("/"), b + a[0] + (a[0] != "image" && a[1] ? " " + b + a[1].replace(/(\.|\+)/g, "-") : "")
        },
        mime2kind: function (a) {
            var b = typeof a == "object" ? a.mime : a,
                c;
            a.alias ? c = "Alias" : this.kinds[b] ? c = this.kinds[b] : b.indexOf("text") === 0 ? c = "Text" : b.indexOf("image") === 0 ? c = "Image" : b.indexOf("audio") === 0 ? c = "Audio" : b.indexOf("video") === 0 ? c = "Video" : b.indexOf("application") === 0 ? c = "App" : c = b;
            return this.messages["kind" + c] ? this.i18n("kind" + c) : b;
            var b, c
        },
        formatDate: function (a, b) {
            var c = this,
                b = b || a.ts,
                d = c.i18,
                e, f, g, h, i, j, k, l, m, n, o;
            return c.options.clientFormatDate && b > 0 ? (e = new Date(b * 1e3), l = e[c.getHours](), m = l > 12 ? l - 12 : l, n = e[c.getMinutes](), o = e[c.getSeconds](), h = e[c.getDate](), i = e[c.getDay](), j = e[c.getMonth]() + 1, k = e[c.getFullYear](), f = b >= this.yesterday ? this.fancyFormat : this.dateFormat, g = f.replace(/[a-z]/gi, function (a) {
                switch (a) {
                    case "d":
                        return h > 9 ? h : "0" + h;
                    case "j":
                        return h;
        